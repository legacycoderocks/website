name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]
  schedule:
    - cron: '0 11 * * *'
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_BUCKET: "${{ secrets.S3_BUCKET }}"
  CLOUDFRONT_ID: ${{ secrets.CLOUDFRONT_ID }}
  PATREON_CREATOR_ACCESS_TOKEN: ${{ secrets.PATREON_CREATOR_ACCESS_TOKEN }}
  PATREON_CAMPAIGN_ID: ${{ secrets.PATREON_CAMPAIGN_ID }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Use Node.js 19.x
        uses: actions/setup-node@v3
        with:
          node-version: 19.x
          cache: 'npm'

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Cache Next.js build
        id: cache-nextjs
        uses: actions/cache@v4
        with:
          # See here for caching with `yarn`, `bun` or other package managers https://github.com/actions/cache/blob/main/examples.md or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
      
      - run: npm ci
      
      - run: npm run build
      
      - name: Archive site as artifact
        uses: actions/upload-artifact@v4
        with:
          name: out
          path: out

      - name: Archive s3_website.yml as artifact
        uses: actions/upload-artifact@v4
        with:
          name: s3_website
          path: s3_website.yml

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: contains(github.ref, 'main')
    steps:
      - name: Retrieve site from artifacts
        uses: actions/download-artifact@v4
        with:
          name: out
          path: out

      - name: Retrieve s3_website.yml from artifacts
        uses: actions/download-artifact@v4
        with:
          name: s3_website
          path: s3_website

      - name: Move s3_website.yml into root
        run: |
          mv s3_website/s3_website.yml s3_website.yml
            
      - name: S3 Publish
        uses: docker://justinharringa/s3_website:master
        with:
          args: 'push --site out'
